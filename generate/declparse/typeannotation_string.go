// Code generated by "stringer -type TypeAnnotation"; DO NOT EDIT.

package declparse

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeAnnotConst-0]
	_ = x[TypeAnnotOneway-1]
	_ = x[TypeAnnotSigned-2]
	_ = x[TypeAnnotUnsigned-3]
	_ = x[TypeAnnotKindOf-4]
	_ = x[TypeAnnotCovariant-5]
	_ = x[TypeAnnotIn-6]
	_ = x[TypeAnnotOut-7]
	_ = x[TypeAnnotInout-8]
	_ = x[TypeAnnotByCopy-9]
	_ = x[TypeAnnotByRef-10]
	_ = x[annonatedType-11]
	_ = x[TypeAnnotNullable-12]
	_ = x[TypeAnnotNonnull-13]
	_ = x[TypeAnnotNullUnspecified-14]
	_ = x[TypeAnnotStruct-15]
	_ = x[TypeAnnotUnavailable-16]
}

const _TypeAnnotation_name = "TypeAnnotConstTypeAnnotOnewayTypeAnnotSignedTypeAnnotUnsignedTypeAnnotKindOfTypeAnnotCovariantTypeAnnotInTypeAnnotOutTypeAnnotInoutTypeAnnotByCopyTypeAnnotByRefannonatedTypeTypeAnnotNullableTypeAnnotNonnullTypeAnnotNullUnspecifiedTypeAnnotStructTypeAnnotUnavailable"

var _TypeAnnotation_index = [...]uint16{0, 14, 29, 44, 61, 76, 94, 105, 117, 131, 146, 160, 173, 190, 206, 230, 245, 265}

func (i TypeAnnotation) xstring() string {
	if i < 0 || i >= TypeAnnotation(len(_TypeAnnotation_index)-1) {
		return "TypeAnnotation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TypeAnnotation_name[_TypeAnnotation_index[i]:_TypeAnnotation_index[i+1]]
}

func (i TypeAnnotation) MarshalText() ([]byte, error) {
	return []byte(i.xstring()), nil
}
