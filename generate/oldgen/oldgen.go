package oldgen

import (
	"bufio"
	"fmt"
	"io/fs"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	gen "github.com/progrium/macdriver/generate/codegen"
	"github.com/progrium/macdriver/generate/oldgen/data"
	"github.com/progrium/macdriver/generate/typing"
	"github.com/progrium/macdriver/internal/set"
)

func GenerateAll(rootDir string) {
	log.SetFlags(log.Lshortfile | log.Ldate | log.Ltime)

	RemoveGeneratedCode(rootDir)

	GenerateModules(rootDir, nil)
}

func GenerateModules(rootDir string, names []string) {
	//handwritten Foundation Framework types
	ignoreTypes := set.New(
		"Foundation.NSObject", "Foundation.NSMutableString",
		"Foundation.NSMutableData", "Foundation.NSData",
		"Foundation.NSMutableArray", "Foundation.NSArray",
		"Foundation.NSMutableDictionary", "Foundation.NSDictionary",
		"Foundation.NSSet", "Foundation.NSString",
		"Foundation.NSPoint", "Foundation.NSSize", "Foundation.NSRect",
		"objectivec.NSObject", "objectivec.INSObject", "objectivec.Class",
	)

	for _, mod := range LoadAllMeta() {
		if mod.Name == "objectivec" {
			continue
		}
		if len(names) > 0 && !strIn(names, mod.Name) {
			continue
		}
		Generate(rootDir, mod, ignoreTypes)
	}

	FormatCode(rootDir)
}

func Generate(rootDir string, mod Module, ignoreTypes set.Set[string]) {
	module := typing.FindModule(mod.Name)
	mw := &gen.ModuleWriter{
		Module:      *module,
		CodeFileDir: rootDir,
	}
	for _, typeInfo := range mod.Types {
		if ignoreTypes.Contains(typeInfo.FullName()) {
			continue
		}
		switch tti := typeInfo.(type) {
		case *data.Class:
			classGen := getClassGen(tti)
			classGen.Init()
			fw := &gen.FileWriter{
				Name:        tti.Name,
				Module:      *classGen.Type.Module,
				CodeFileDir: rootDir,
			}
			fw.Add(classGen)
			fw.WriteCode()
		case *data.Protocol:
			protocolGen := getProtocolGen(tti)
			protocolGen.Init()
			fw := &gen.FileWriter{
				Name:        tti.Name,
				Module:      *protocolGen.Type.Module,
				CodeFileDir: rootDir,
			}
			fw.Add(protocolGen)
			fw.WriteCode()
			mw.Protocols = append(mw.Protocols, protocolGen.Type)
		case *data.Alias:
			mw.Aliases = append(mw.Aliases, getEnumInfo(tti))
		}
	}
	mw.WriteCode()
	//FormatCode(rootDir + "/" + module.Package)
}

func RemoveGeneratedCode(dir string) {
	filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if d.Type().IsRegular() {
			f, _ := os.Open(path)
			defer f.Close()
			scanner := bufio.NewScanner(f)
			if scanner.Scan() {
				line := strings.TrimSpace(scanner.Text())
				if line == gen.AutoGeneratedMark {
					os.Remove(path)
				}
			}
		}
		return err
	})
}

func FormatCode(dir string) {
	log.Println("formating go code...")
	cmd := exec.Command("goimports", "-w", dir)
	stdout, err := cmd.Output()

	if err != nil {
		log.Println("format code error:", err.Error())
		fmt.Println(stdout)
		return
	}

	fmt.Println(string(stdout))
}

func strIn(slice []string, str string) bool {
	for _, s := range slice {
		if strings.ToLower(str) == strings.ToLower(s) {
			return true
		}
	}
	return false
}
