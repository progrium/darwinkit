{
    "kind": "class",
    "name": "NSExpression",
    "module": "Foundation",
    "parent": "objectivec.NSObject *",
    "properties": [
        {
            "name": "arguments",
            "read_only": true,
            "type": "NSArray<Foundation.NSExpression *> *"
        },
        {
            "name": "collection",
            "read_only": true,
            "type": "objectivec.NSObject *"
        },
        {
            "name": "constantValue",
            "read_only": true,
            "type": "objectivec.NSObject *"
        },
        {
            "name": "expressionType",
            "read_only": true,
            "type": "Foundation.NSExpressionType"
        },
        {
            "name": "function",
            "read_only": true,
            "type": "NSString*"
        },
        {
            "name": "keyPath",
            "read_only": true,
            "type": "NSString*"
        },
        {
            "name": "operand",
            "read_only": true,
            "type": "Foundation.NSExpression *"
        },
        {
            "name": "predicate",
            "read_only": true,
            "type": "Foundation.NSPredicate *"
        },
        {
            "name": "leftExpression",
            "read_only": true,
            "type": "Foundation.NSExpression *"
        },
        {
            "name": "rightExpression",
            "read_only": true,
            "type": "Foundation.NSExpression *"
        },
        {
            "name": "variable",
            "read_only": true,
            "type": "NSString*"
        },
        {
            "name": "falseExpression",
            "read_only": true,
            "type": "Foundation.NSExpression *"
        },
        {
            "name": "trueExpression",
            "read_only": true,
            "type": "Foundation.NSExpression *"
        },
        {
            "name": "expressionBlock",
            "read_only": true,
            "type": "objectivec.NSObject * (^) (objectivec.NSObject * param1, NSArray<Foundation.NSExpression *> * param2, Foundation.NSMutableDictionary * param3)"
        }
    ],
    "methods": [
        {
            "name": "initWithExpressionType",
            "params": [
                {
                    "variable_name": "type",
                    "type": "Foundation.NSExpressionType"
                }
            ],
            "return_type": "instance"
        },
        {
            "name": "expressionWithFormat",
            "params": [
                {
                    "variable_name": "expressionFormat",
                    "type": "NSString*"
                },
                {
                    "name": "argumentArray",
                    "variable_name": "arguments",
                    "type": "NSArray<objectivec.NSObject *> *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "initWithCoder",
            "params": [
                {
                    "variable_name": "coder",
                    "type": "Foundation.NSCoder *"
                }
            ],
            "return_type": "instance"
        },
        {
            "name": "expressionForConstantValue",
            "params": [
                {
                    "variable_name": "obj",
                    "type": "objectivec.NSObject *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForEvaluatedObject",
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForKeyPath",
            "params": [
                {
                    "variable_name": "keyPath",
                    "type": "NSString*"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForVariable",
            "params": [
                {
                    "variable_name": "string",
                    "type": "NSString*"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForAnyKey",
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForAggregate",
            "params": [
                {
                    "variable_name": "subexpressions",
                    "type": "NSArray<Foundation.NSExpression *> *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForUnionSet",
            "params": [
                {
                    "variable_name": "left",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "with",
                    "variable_name": "right",
                    "type": "Foundation.NSExpression *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForIntersectSet",
            "params": [
                {
                    "variable_name": "left",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "with",
                    "variable_name": "right",
                    "type": "Foundation.NSExpression *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForMinusSet",
            "params": [
                {
                    "variable_name": "left",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "with",
                    "variable_name": "right",
                    "type": "Foundation.NSExpression *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForSubquery",
            "params": [
                {
                    "variable_name": "expression",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "usingIteratorVariable",
                    "variable_name": "variable",
                    "type": "NSString*"
                },
                {
                    "name": "predicate",
                    "variable_name": "predicate",
                    "type": "Foundation.NSPredicate *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForConditional",
            "params": [
                {
                    "variable_name": "predicate",
                    "type": "Foundation.NSPredicate *"
                },
                {
                    "name": "trueExpression",
                    "variable_name": "trueExpression",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "falseExpression",
                    "variable_name": "falseExpression",
                    "type": "Foundation.NSExpression *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForBlock",
            "params": [
                {
                    "variable_name": "block",
                    "type": "objectivec.NSObject * (^) (objectivec.NSObject * evaluatedObject, NSArray<Foundation.NSExpression *> * expressions, Foundation.NSMutableDictionary * context)"
                },
                {
                    "name": "arguments",
                    "variable_name": "arguments",
                    "type": "NSArray<Foundation.NSExpression *> *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForFunction",
            "params": [
                {
                    "variable_name": "name",
                    "type": "NSString*"
                },
                {
                    "name": "arguments",
                    "variable_name": "parameters",
                    "type": "NSArray<objectivec.NSObject *> *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionForFunction",
            "params": [
                {
                    "variable_name": "target",
                    "type": "Foundation.NSExpression *"
                },
                {
                    "name": "selectorName",
                    "variable_name": "name",
                    "type": "NSString*"
                },
                {
                    "name": "arguments",
                    "variable_name": "parameters",
                    "type": "NSArray<objectivec.NSObject *> *"
                }
            ],
            "return_type": "Foundation.NSExpression *",
            "class_method": true
        },
        {
            "name": "expressionValueWithObject",
            "params": [
                {
                    "variable_name": "object",
                    "type": "objectivec.NSObject *"
                },
                {
                    "name": "context",
                    "variable_name": "context",
                    "type": "Foundation.NSMutableDictionary *"
                }
            ],
            "return_type": "objectivec.NSObject *"
        },
        {
            "name": "allowEvaluation",
            "return_type": "void"
        }
    ]
}
