// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a false color filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor?language=objc
type PFalseColor interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetColor0(value Color)
	HasSetColor0() bool

	// optional
	Color0() Color
	HasColor0() bool

	// optional
	SetColor1(value Color)
	HasSetColor1() bool

	// optional
	Color1() Color
	HasColor1() bool
}

// ensure impl type implements protocol interface
var _ PFalseColor = (*FalseColorObject)(nil)

// A concrete type for the [PFalseColor] protocol.
type FalseColorObject struct {
	objc.Object
}

func (f_ FalseColorObject) HasSetInputImage() bool {
	return f_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228258-inputimage?language=objc
func (f_ FalseColorObject) SetInputImage(value Image) {
	objc.Call[objc.Void](f_, objc.Sel("setInputImage:"), value)
}

func (f_ FalseColorObject) HasInputImage() bool {
	return f_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228258-inputimage?language=objc
func (f_ FalseColorObject) InputImage() Image {
	rv := objc.Call[Image](f_, objc.Sel("inputImage"))
	return rv
}

func (f_ FalseColorObject) HasSetColor0() bool {
	return f_.RespondsToSelector(objc.Sel("setColor0:"))
}

// The first color to use for the color ramp. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228256-color0?language=objc
func (f_ FalseColorObject) SetColor0(value Color) {
	objc.Call[objc.Void](f_, objc.Sel("setColor0:"), value)
}

func (f_ FalseColorObject) HasColor0() bool {
	return f_.RespondsToSelector(objc.Sel("color0"))
}

// The first color to use for the color ramp. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228256-color0?language=objc
func (f_ FalseColorObject) Color0() Color {
	rv := objc.Call[Color](f_, objc.Sel("color0"))
	return rv
}

func (f_ FalseColorObject) HasSetColor1() bool {
	return f_.RespondsToSelector(objc.Sel("setColor1:"))
}

// The second color to use for the color ramp. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228257-color1?language=objc
func (f_ FalseColorObject) SetColor1(value Color) {
	objc.Call[objc.Void](f_, objc.Sel("setColor1:"), value)
}

func (f_ FalseColorObject) HasColor1() bool {
	return f_.RespondsToSelector(objc.Sel("color1"))
}

// The second color to use for the color ramp. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cifalsecolor/3228257-color1?language=objc
func (f_ FalseColorObject) Color1() Color {
	rv := objc.Call[Color](f_, objc.Sel("color1"))
	return rv
}
