// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a sixfold reflected tile filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile?language=objc
type PSixfoldReflectedTile interface {
	// optional
	SetWidth(value float32)
	HasSetWidth() bool

	// optional
	Width() float32
	HasWidth() bool

	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetAngle(value float32)
	HasSetAngle() bool

	// optional
	Angle() float32
	HasAngle() bool

	// optional
	SetCenter(value coregraphics.Point)
	HasSetCenter() bool

	// optional
	Center() coregraphics.Point
	HasCenter() bool
}

// ensure impl type implements protocol interface
var _ PSixfoldReflectedTile = (*SixfoldReflectedTileObject)(nil)

// A concrete type for the [PSixfoldReflectedTile] protocol.
type SixfoldReflectedTileObject struct {
	objc.Object
}

func (s_ SixfoldReflectedTileObject) HasSetWidth() bool {
	return s_.RespondsToSelector(objc.Sel("setWidth:"))
}

// The width of a tile. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228716-width?language=objc
func (s_ SixfoldReflectedTileObject) SetWidth(value float32) {
	objc.Call[objc.Void](s_, objc.Sel("setWidth:"), value)
}

func (s_ SixfoldReflectedTileObject) HasWidth() bool {
	return s_.RespondsToSelector(objc.Sel("width"))
}

// The width of a tile. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228716-width?language=objc
func (s_ SixfoldReflectedTileObject) Width() float32 {
	rv := objc.Call[float32](s_, objc.Sel("width"))
	return rv
}

func (s_ SixfoldReflectedTileObject) HasSetInputImage() bool {
	return s_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228715-inputimage?language=objc
func (s_ SixfoldReflectedTileObject) SetInputImage(value Image) {
	objc.Call[objc.Void](s_, objc.Sel("setInputImage:"), value)
}

func (s_ SixfoldReflectedTileObject) HasInputImage() bool {
	return s_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228715-inputimage?language=objc
func (s_ SixfoldReflectedTileObject) InputImage() Image {
	rv := objc.Call[Image](s_, objc.Sel("inputImage"))
	return rv
}

func (s_ SixfoldReflectedTileObject) HasSetAngle() bool {
	return s_.RespondsToSelector(objc.Sel("setAngle:"))
}

// The angle, in radians, of the tiled pattern. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228713-angle?language=objc
func (s_ SixfoldReflectedTileObject) SetAngle(value float32) {
	objc.Call[objc.Void](s_, objc.Sel("setAngle:"), value)
}

func (s_ SixfoldReflectedTileObject) HasAngle() bool {
	return s_.RespondsToSelector(objc.Sel("angle"))
}

// The angle, in radians, of the tiled pattern. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228713-angle?language=objc
func (s_ SixfoldReflectedTileObject) Angle() float32 {
	rv := objc.Call[float32](s_, objc.Sel("angle"))
	return rv
}

func (s_ SixfoldReflectedTileObject) HasSetCenter() bool {
	return s_.RespondsToSelector(objc.Sel("setCenter:"))
}

// The x and y position to use as the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228714-center?language=objc
func (s_ SixfoldReflectedTileObject) SetCenter(value coregraphics.Point) {
	objc.Call[objc.Void](s_, objc.Sel("setCenter:"), value)
}

func (s_ SixfoldReflectedTileObject) HasCenter() bool {
	return s_.RespondsToSelector(objc.Sel("center"))
}

// The x and y position to use as the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cisixfoldreflectedtile/3228714-center?language=objc
func (s_ SixfoldReflectedTileObject) Center() coregraphics.Point {
	rv := objc.Call[coregraphics.Point](s_, objc.Sel("center"))
	return rv
}
