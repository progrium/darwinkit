// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a color posterize filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolorposterize?language=objc
type PColorPosterize interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetLevels(value float32)
	HasSetLevels() bool

	// optional
	Levels() float32
	HasLevels() bool
}

// ensure impl type implements protocol interface
var _ PColorPosterize = (*ColorPosterizeObject)(nil)

// A concrete type for the [PColorPosterize] protocol.
type ColorPosterizeObject struct {
	objc.Object
}

func (c_ ColorPosterizeObject) HasSetInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolorposterize/3228177-inputimage?language=objc
func (c_ ColorPosterizeObject) SetInputImage(value Image) {
	objc.Call[objc.Void](c_, objc.Sel("setInputImage:"), value)
}

func (c_ ColorPosterizeObject) HasInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolorposterize/3228177-inputimage?language=objc
func (c_ ColorPosterizeObject) InputImage() Image {
	rv := objc.Call[Image](c_, objc.Sel("inputImage"))
	return rv
}

func (c_ ColorPosterizeObject) HasSetLevels() bool {
	return c_.RespondsToSelector(objc.Sel("setLevels:"))
}

// The number of brightness levels to use for each color component. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolorposterize/3228178-levels?language=objc
func (c_ ColorPosterizeObject) SetLevels(value float32) {
	objc.Call[objc.Void](c_, objc.Sel("setLevels:"), value)
}

func (c_ ColorPosterizeObject) HasLevels() bool {
	return c_.RespondsToSelector(objc.Sel("levels"))
}

// The number of brightness levels to use for each color component. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolorposterize/3228178-levels?language=objc
func (c_ ColorPosterizeObject) Levels() float32 {
	rv := objc.Call[float32](c_, objc.Sel("levels"))
	return rv
}
