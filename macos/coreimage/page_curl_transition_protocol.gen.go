// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a page curl transition filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition?language=objc
type PPageCurlTransition interface {
	// optional
	SetRadius(value float32)
	HasSetRadius() bool

	// optional
	Radius() float32
	HasRadius() bool

	// optional
	SetExtent(value coregraphics.Rect)
	HasSetExtent() bool

	// optional
	Extent() coregraphics.Rect
	HasExtent() bool

	// optional
	SetAngle(value float32)
	HasSetAngle() bool

	// optional
	Angle() float32
	HasAngle() bool

	// optional
	SetBacksideImage(value Image)
	HasSetBacksideImage() bool

	// optional
	BacksideImage() Image
	HasBacksideImage() bool

	// optional
	SetShadingImage(value Image)
	HasSetShadingImage() bool

	// optional
	ShadingImage() Image
	HasShadingImage() bool
}

// ensure impl type implements protocol interface
var _ PPageCurlTransition = (*PageCurlTransitionObject)(nil)

// A concrete type for the [PPageCurlTransition] protocol.
type PageCurlTransitionObject struct {
	objc.Object
}

func (p_ PageCurlTransitionObject) HasSetRadius() bool {
	return p_.RespondsToSelector(objc.Sel("setRadius:"))
}

// The radius of the curl. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228621-radius?language=objc
func (p_ PageCurlTransitionObject) SetRadius(value float32) {
	objc.Call[objc.Void](p_, objc.Sel("setRadius:"), value)
}

func (p_ PageCurlTransitionObject) HasRadius() bool {
	return p_.RespondsToSelector(objc.Sel("radius"))
}

// The radius of the curl. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228621-radius?language=objc
func (p_ PageCurlTransitionObject) Radius() float32 {
	rv := objc.Call[float32](p_, objc.Sel("radius"))
	return rv
}

func (p_ PageCurlTransitionObject) HasSetExtent() bool {
	return p_.RespondsToSelector(objc.Sel("setExtent:"))
}

// The extent of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228620-extent?language=objc
func (p_ PageCurlTransitionObject) SetExtent(value coregraphics.Rect) {
	objc.Call[objc.Void](p_, objc.Sel("setExtent:"), value)
}

func (p_ PageCurlTransitionObject) HasExtent() bool {
	return p_.RespondsToSelector(objc.Sel("extent"))
}

// The extent of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228620-extent?language=objc
func (p_ PageCurlTransitionObject) Extent() coregraphics.Rect {
	rv := objc.Call[coregraphics.Rect](p_, objc.Sel("extent"))
	return rv
}

func (p_ PageCurlTransitionObject) HasSetAngle() bool {
	return p_.RespondsToSelector(objc.Sel("setAngle:"))
}

// The angle of the curling page. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228618-angle?language=objc
func (p_ PageCurlTransitionObject) SetAngle(value float32) {
	objc.Call[objc.Void](p_, objc.Sel("setAngle:"), value)
}

func (p_ PageCurlTransitionObject) HasAngle() bool {
	return p_.RespondsToSelector(objc.Sel("angle"))
}

// The angle of the curling page. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228618-angle?language=objc
func (p_ PageCurlTransitionObject) Angle() float32 {
	rv := objc.Call[float32](p_, objc.Sel("angle"))
	return rv
}

func (p_ PageCurlTransitionObject) HasSetBacksideImage() bool {
	return p_.RespondsToSelector(objc.Sel("setBacksideImage:"))
}

// The image that appears on the back of the source image as the page curls to reveal the target image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228619-backsideimage?language=objc
func (p_ PageCurlTransitionObject) SetBacksideImage(value Image) {
	objc.Call[objc.Void](p_, objc.Sel("setBacksideImage:"), value)
}

func (p_ PageCurlTransitionObject) HasBacksideImage() bool {
	return p_.RespondsToSelector(objc.Sel("backsideImage"))
}

// The image that appears on the back of the source image as the page curls to reveal the target image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228619-backsideimage?language=objc
func (p_ PageCurlTransitionObject) BacksideImage() Image {
	rv := objc.Call[Image](p_, objc.Sel("backsideImage"))
	return rv
}

func (p_ PageCurlTransitionObject) HasSetShadingImage() bool {
	return p_.RespondsToSelector(objc.Sel("setShadingImage:"))
}

// An image that looks like a shaded sphere enclosed in a square. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228622-shadingimage?language=objc
func (p_ PageCurlTransitionObject) SetShadingImage(value Image) {
	objc.Call[objc.Void](p_, objc.Sel("setShadingImage:"), value)
}

func (p_ PageCurlTransitionObject) HasShadingImage() bool {
	return p_.RespondsToSelector(objc.Sel("shadingImage"))
}

// An image that looks like a shaded sphere enclosed in a square. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cipagecurltransition/3228622-shadingimage?language=objc
func (p_ PageCurlTransitionObject) ShadingImage() Image {
	rv := objc.Call[Image](p_, objc.Sel("shadingImage"))
	return rv
}
