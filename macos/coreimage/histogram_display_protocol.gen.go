// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay?language=objc
type PHistogramDisplay interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetHeight(value float32)
	HasSetHeight() bool

	// optional
	Height() float32
	HasHeight() bool

	// optional
	SetHighLimit(value float32)
	HasSetHighLimit() bool

	// optional
	HighLimit() float32
	HasHighLimit() bool

	// optional
	SetLowLimit(value float32)
	HasSetLowLimit() bool

	// optional
	LowLimit() float32
	HasLowLimit() bool
}

// ensure impl type implements protocol interface
var _ PHistogramDisplay = (*HistogramDisplayObject)(nil)

// A concrete type for the [PHistogramDisplay] protocol.
type HistogramDisplayObject struct {
	objc.Object
}

func (h_ HistogramDisplayObject) HasSetInputImage() bool {
	return h_.RespondsToSelector(objc.Sel("setInputImage:"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547127-inputimage?language=objc
func (h_ HistogramDisplayObject) SetInputImage(value Image) {
	objc.Call[objc.Void](h_, objc.Sel("setInputImage:"), value)
}

func (h_ HistogramDisplayObject) HasInputImage() bool {
	return h_.RespondsToSelector(objc.Sel("inputImage"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547127-inputimage?language=objc
func (h_ HistogramDisplayObject) InputImage() Image {
	rv := objc.Call[Image](h_, objc.Sel("inputImage"))
	return rv
}

func (h_ HistogramDisplayObject) HasSetHeight() bool {
	return h_.RespondsToSelector(objc.Sel("setHeight:"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547125-height?language=objc
func (h_ HistogramDisplayObject) SetHeight(value float32) {
	objc.Call[objc.Void](h_, objc.Sel("setHeight:"), value)
}

func (h_ HistogramDisplayObject) HasHeight() bool {
	return h_.RespondsToSelector(objc.Sel("height"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547125-height?language=objc
func (h_ HistogramDisplayObject) Height() float32 {
	rv := objc.Call[float32](h_, objc.Sel("height"))
	return rv
}

func (h_ HistogramDisplayObject) HasSetHighLimit() bool {
	return h_.RespondsToSelector(objc.Sel("setHighLimit:"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547126-highlimit?language=objc
func (h_ HistogramDisplayObject) SetHighLimit(value float32) {
	objc.Call[objc.Void](h_, objc.Sel("setHighLimit:"), value)
}

func (h_ HistogramDisplayObject) HasHighLimit() bool {
	return h_.RespondsToSelector(objc.Sel("highLimit"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547126-highlimit?language=objc
func (h_ HistogramDisplayObject) HighLimit() float32 {
	rv := objc.Call[float32](h_, objc.Sel("highLimit"))
	return rv
}

func (h_ HistogramDisplayObject) HasSetLowLimit() bool {
	return h_.RespondsToSelector(objc.Sel("setLowLimit:"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547128-lowlimit?language=objc
func (h_ HistogramDisplayObject) SetLowLimit(value float32) {
	objc.Call[objc.Void](h_, objc.Sel("setLowLimit:"), value)
}

func (h_ HistogramDisplayObject) HasLowLimit() bool {
	return h_.RespondsToSelector(objc.Sel("lowLimit"))
}

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cihistogramdisplay/3547128-lowlimit?language=objc
func (h_ HistogramDisplayObject) LowLimit() float32 {
	rv := objc.Call[float32](h_, objc.Sel("lowLimit"))
	return rv
}
