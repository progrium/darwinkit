// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a transition filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter?language=objc
type PTransitionFilter interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetTargetImage(value Image)
	HasSetTargetImage() bool

	// optional
	TargetImage() Image
	HasTargetImage() bool

	// optional
	SetTime(value float32)
	HasSetTime() bool

	// optional
	Time() float32
	HasTime() bool
}

// ensure impl type implements protocol interface
var _ PTransitionFilter = (*TransitionFilterObject)(nil)

// A concrete type for the [PTransitionFilter] protocol.
type TransitionFilterObject struct {
	objc.Object
}

func (t_ TransitionFilterObject) HasSetInputImage() bool {
	return t_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228799-inputimage?language=objc
func (t_ TransitionFilterObject) SetInputImage(value Image) {
	objc.Call[objc.Void](t_, objc.Sel("setInputImage:"), value)
}

func (t_ TransitionFilterObject) HasInputImage() bool {
	return t_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228799-inputimage?language=objc
func (t_ TransitionFilterObject) InputImage() Image {
	rv := objc.Call[Image](t_, objc.Sel("inputImage"))
	return rv
}

func (t_ TransitionFilterObject) HasSetTargetImage() bool {
	return t_.RespondsToSelector(objc.Sel("setTargetImage:"))
}

// The target image for a transition. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228800-targetimage?language=objc
func (t_ TransitionFilterObject) SetTargetImage(value Image) {
	objc.Call[objc.Void](t_, objc.Sel("setTargetImage:"), value)
}

func (t_ TransitionFilterObject) HasTargetImage() bool {
	return t_.RespondsToSelector(objc.Sel("targetImage"))
}

// The target image for a transition. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228800-targetimage?language=objc
func (t_ TransitionFilterObject) TargetImage() Image {
	rv := objc.Call[Image](t_, objc.Sel("targetImage"))
	return rv
}

func (t_ TransitionFilterObject) HasSetTime() bool {
	return t_.RespondsToSelector(objc.Sel("setTime:"))
}

// The parametric time of the transition. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228801-time?language=objc
func (t_ TransitionFilterObject) SetTime(value float32) {
	objc.Call[objc.Void](t_, objc.Sel("setTime:"), value)
}

func (t_ TransitionFilterObject) HasTime() bool {
	return t_.RespondsToSelector(objc.Sel("time"))
}

// The parametric time of the transition. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/citransitionfilter/3228801-time?language=objc
func (t_ TransitionFilterObject) Time() float32 {
	rv := objc.Call[float32](t_, objc.Sel("time"))
	return rv
}
