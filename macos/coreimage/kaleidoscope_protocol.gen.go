// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a kaleidoscope filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope?language=objc
type PKaleidoscope interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetCount(value int)
	HasSetCount() bool

	// optional
	Count() int
	HasCount() bool

	// optional
	SetAngle(value float32)
	HasSetAngle() bool

	// optional
	Angle() float32
	HasAngle() bool

	// optional
	SetCenter(value coregraphics.Point)
	HasSetCenter() bool

	// optional
	Center() coregraphics.Point
	HasCenter() bool
}

// ensure impl type implements protocol interface
var _ PKaleidoscope = (*KaleidoscopeObject)(nil)

// A concrete type for the [PKaleidoscope] protocol.
type KaleidoscopeObject struct {
	objc.Object
}

func (k_ KaleidoscopeObject) HasSetInputImage() bool {
	return k_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228511-inputimage?language=objc
func (k_ KaleidoscopeObject) SetInputImage(value Image) {
	objc.Call[objc.Void](k_, objc.Sel("setInputImage:"), value)
}

func (k_ KaleidoscopeObject) HasInputImage() bool {
	return k_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228511-inputimage?language=objc
func (k_ KaleidoscopeObject) InputImage() Image {
	rv := objc.Call[Image](k_, objc.Sel("inputImage"))
	return rv
}

func (k_ KaleidoscopeObject) HasSetCount() bool {
	return k_.RespondsToSelector(objc.Sel("setCount:"))
}

// The number of reflections in the pattern. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228510-count?language=objc
func (k_ KaleidoscopeObject) SetCount(value int) {
	objc.Call[objc.Void](k_, objc.Sel("setCount:"), value)
}

func (k_ KaleidoscopeObject) HasCount() bool {
	return k_.RespondsToSelector(objc.Sel("count"))
}

// The number of reflections in the pattern. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228510-count?language=objc
func (k_ KaleidoscopeObject) Count() int {
	rv := objc.Call[int](k_, objc.Sel("count"))
	return rv
}

func (k_ KaleidoscopeObject) HasSetAngle() bool {
	return k_.RespondsToSelector(objc.Sel("setAngle:"))
}

// The angle of the reflection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228508-angle?language=objc
func (k_ KaleidoscopeObject) SetAngle(value float32) {
	objc.Call[objc.Void](k_, objc.Sel("setAngle:"), value)
}

func (k_ KaleidoscopeObject) HasAngle() bool {
	return k_.RespondsToSelector(objc.Sel("angle"))
}

// The angle of the reflection. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228508-angle?language=objc
func (k_ KaleidoscopeObject) Angle() float32 {
	rv := objc.Call[float32](k_, objc.Sel("angle"))
	return rv
}

func (k_ KaleidoscopeObject) HasSetCenter() bool {
	return k_.RespondsToSelector(objc.Sel("setCenter:"))
}

// The x and y position to use as the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228509-center?language=objc
func (k_ KaleidoscopeObject) SetCenter(value coregraphics.Point) {
	objc.Call[objc.Void](k_, objc.Sel("setCenter:"), value)
}

func (k_ KaleidoscopeObject) HasCenter() bool {
	return k_.RespondsToSelector(objc.Sel("center"))
}

// The x and y position to use as the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cikaleidoscope/3228509-center?language=objc
func (k_ KaleidoscopeObject) Center() coregraphics.Point {
	rv := objc.Call[coregraphics.Point](k_, objc.Sel("center"))
	return rv
}
