// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a color matrix filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix?language=objc
type PColorMatrix interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetGVector(value Vector)
	HasSetGVector() bool

	// optional
	GVector() Vector
	HasGVector() bool

	// optional
	SetBiasVector(value Vector)
	HasSetBiasVector() bool

	// optional
	BiasVector() Vector
	HasBiasVector() bool

	// optional
	SetBVector(value Vector)
	HasSetBVector() bool

	// optional
	BVector() Vector
	HasBVector() bool

	// optional
	SetRVector(value Vector)
	HasSetRVector() bool

	// optional
	RVector() Vector
	HasRVector() bool

	// optional
	SetAVector(value Vector)
	HasSetAVector() bool

	// optional
	AVector() Vector
	HasAVector() bool
}

// ensure impl type implements protocol interface
var _ PColorMatrix = (*ColorMatrixObject)(nil)

// A concrete type for the [PColorMatrix] protocol.
type ColorMatrixObject struct {
	objc.Object
}

func (c_ ColorMatrixObject) HasSetInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228165-inputimage?language=objc
func (c_ ColorMatrixObject) SetInputImage(value Image) {
	objc.Call[objc.Void](c_, objc.Sel("setInputImage:"), value)
}

func (c_ ColorMatrixObject) HasInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228165-inputimage?language=objc
func (c_ ColorMatrixObject) InputImage() Image {
	rv := objc.Call[Image](c_, objc.Sel("inputImage"))
	return rv
}

func (c_ ColorMatrixObject) HasSetGVector() bool {
	return c_.RespondsToSelector(objc.Sel("setGVector:"))
}

// The amount of green to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228162-gvector?language=objc
func (c_ ColorMatrixObject) SetGVector(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setGVector:"), value)
}

func (c_ ColorMatrixObject) HasGVector() bool {
	return c_.RespondsToSelector(objc.Sel("GVector"))
}

// The amount of green to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228162-gvector?language=objc
func (c_ ColorMatrixObject) GVector() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("GVector"))
	return rv
}

func (c_ ColorMatrixObject) HasSetBiasVector() bool {
	return c_.RespondsToSelector(objc.Sel("setBiasVector:"))
}

// A vector that’s added to each color component. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228164-biasvector?language=objc
func (c_ ColorMatrixObject) SetBiasVector(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setBiasVector:"), value)
}

func (c_ ColorMatrixObject) HasBiasVector() bool {
	return c_.RespondsToSelector(objc.Sel("biasVector"))
}

// A vector that’s added to each color component. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228164-biasvector?language=objc
func (c_ ColorMatrixObject) BiasVector() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("biasVector"))
	return rv
}

func (c_ ColorMatrixObject) HasSetBVector() bool {
	return c_.RespondsToSelector(objc.Sel("setBVector:"))
}

// The amount of blue to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228161-bvector?language=objc
func (c_ ColorMatrixObject) SetBVector(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setBVector:"), value)
}

func (c_ ColorMatrixObject) HasBVector() bool {
	return c_.RespondsToSelector(objc.Sel("BVector"))
}

// The amount of blue to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228161-bvector?language=objc
func (c_ ColorMatrixObject) BVector() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("BVector"))
	return rv
}

func (c_ ColorMatrixObject) HasSetRVector() bool {
	return c_.RespondsToSelector(objc.Sel("setRVector:"))
}

// The amount of red to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228163-rvector?language=objc
func (c_ ColorMatrixObject) SetRVector(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setRVector:"), value)
}

func (c_ ColorMatrixObject) HasRVector() bool {
	return c_.RespondsToSelector(objc.Sel("RVector"))
}

// The amount of red to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228163-rvector?language=objc
func (c_ ColorMatrixObject) RVector() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("RVector"))
	return rv
}

func (c_ ColorMatrixObject) HasSetAVector() bool {
	return c_.RespondsToSelector(objc.Sel("setAVector:"))
}

// The amount of alpha to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228160-avector?language=objc
func (c_ ColorMatrixObject) SetAVector(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setAVector:"), value)
}

func (c_ ColorMatrixObject) HasAVector() bool {
	return c_.RespondsToSelector(objc.Sel("AVector"))
}

// The amount of alpha to multiply the source color values by. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cicolormatrix/3228160-avector?language=objc
func (c_ ColorMatrixObject) AVector() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("AVector"))
	return rv
}
