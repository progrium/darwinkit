// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a convolution filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution?language=objc
type PConvolution interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetWeights(value Vector)
	HasSetWeights() bool

	// optional
	Weights() Vector
	HasWeights() bool

	// optional
	SetBias(value float32)
	HasSetBias() bool

	// optional
	Bias() float32
	HasBias() bool
}

// ensure impl type implements protocol interface
var _ PConvolution = (*ConvolutionObject)(nil)

// A concrete type for the [PConvolution] protocol.
type ConvolutionObject struct {
	objc.Object
}

func (c_ ConvolutionObject) HasSetInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228186-inputimage?language=objc
func (c_ ConvolutionObject) SetInputImage(value Image) {
	objc.Call[objc.Void](c_, objc.Sel("setInputImage:"), value)
}

func (c_ ConvolutionObject) HasInputImage() bool {
	return c_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228186-inputimage?language=objc
func (c_ ConvolutionObject) InputImage() Image {
	rv := objc.Call[Image](c_, objc.Sel("inputImage"))
	return rv
}

func (c_ ConvolutionObject) HasSetWeights() bool {
	return c_.RespondsToSelector(objc.Sel("setWeights:"))
}

// The convolution kernel. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228187-weights?language=objc
func (c_ ConvolutionObject) SetWeights(value Vector) {
	objc.Call[objc.Void](c_, objc.Sel("setWeights:"), value)
}

func (c_ ConvolutionObject) HasWeights() bool {
	return c_.RespondsToSelector(objc.Sel("weights"))
}

// The convolution kernel. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228187-weights?language=objc
func (c_ ConvolutionObject) Weights() Vector {
	rv := objc.Call[Vector](c_, objc.Sel("weights"))
	return rv
}

func (c_ ConvolutionObject) HasSetBias() bool {
	return c_.RespondsToSelector(objc.Sel("setBias:"))
}

// A value that’s added to each output pixel. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228185-bias?language=objc
func (c_ ConvolutionObject) SetBias(value float32) {
	objc.Call[objc.Void](c_, objc.Sel("setBias:"), value)
}

func (c_ ConvolutionObject) HasBias() bool {
	return c_.RespondsToSelector(objc.Sel("bias"))
}

// A value that’s added to each output pixel. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciconvolution/3228185-bias?language=objc
func (c_ ConvolutionObject) Bias() float32 {
	rv := objc.Call[float32](c_, objc.Sel("bias"))
	return rv
}
