// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a swipe transition filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition?language=objc
type PSwipeTransition interface {
	// optional
	SetColor(value Color)
	HasSetColor() bool

	// optional
	Color() Color
	HasColor() bool

	// optional
	SetWidth(value float32)
	HasSetWidth() bool

	// optional
	Width() float32
	HasWidth() bool

	// optional
	SetOpacity(value float32)
	HasSetOpacity() bool

	// optional
	Opacity() float32
	HasOpacity() bool

	// optional
	SetExtent(value coregraphics.Rect)
	HasSetExtent() bool

	// optional
	Extent() coregraphics.Rect
	HasExtent() bool

	// optional
	SetAngle(value float32)
	HasSetAngle() bool

	// optional
	Angle() float32
	HasAngle() bool
}

// ensure impl type implements protocol interface
var _ PSwipeTransition = (*SwipeTransitionObject)(nil)

// A concrete type for the [PSwipeTransition] protocol.
type SwipeTransitionObject struct {
	objc.Object
}

func (s_ SwipeTransitionObject) HasSetColor() bool {
	return s_.RespondsToSelector(objc.Sel("setColor:"))
}

// The color of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228776-color?language=objc
func (s_ SwipeTransitionObject) SetColor(value Color) {
	objc.Call[objc.Void](s_, objc.Sel("setColor:"), value)
}

func (s_ SwipeTransitionObject) HasColor() bool {
	return s_.RespondsToSelector(objc.Sel("color"))
}

// The color of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228776-color?language=objc
func (s_ SwipeTransitionObject) Color() Color {
	rv := objc.Call[Color](s_, objc.Sel("color"))
	return rv
}

func (s_ SwipeTransitionObject) HasSetWidth() bool {
	return s_.RespondsToSelector(objc.Sel("setWidth:"))
}

// The width of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228779-width?language=objc
func (s_ SwipeTransitionObject) SetWidth(value float32) {
	objc.Call[objc.Void](s_, objc.Sel("setWidth:"), value)
}

func (s_ SwipeTransitionObject) HasWidth() bool {
	return s_.RespondsToSelector(objc.Sel("width"))
}

// The width of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228779-width?language=objc
func (s_ SwipeTransitionObject) Width() float32 {
	rv := objc.Call[float32](s_, objc.Sel("width"))
	return rv
}

func (s_ SwipeTransitionObject) HasSetOpacity() bool {
	return s_.RespondsToSelector(objc.Sel("setOpacity:"))
}

// The opacity of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228778-opacity?language=objc
func (s_ SwipeTransitionObject) SetOpacity(value float32) {
	objc.Call[objc.Void](s_, objc.Sel("setOpacity:"), value)
}

func (s_ SwipeTransitionObject) HasOpacity() bool {
	return s_.RespondsToSelector(objc.Sel("opacity"))
}

// The opacity of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228778-opacity?language=objc
func (s_ SwipeTransitionObject) Opacity() float32 {
	rv := objc.Call[float32](s_, objc.Sel("opacity"))
	return rv
}

func (s_ SwipeTransitionObject) HasSetExtent() bool {
	return s_.RespondsToSelector(objc.Sel("setExtent:"))
}

// The extent of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228777-extent?language=objc
func (s_ SwipeTransitionObject) SetExtent(value coregraphics.Rect) {
	objc.Call[objc.Void](s_, objc.Sel("setExtent:"), value)
}

func (s_ SwipeTransitionObject) HasExtent() bool {
	return s_.RespondsToSelector(objc.Sel("extent"))
}

// The extent of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228777-extent?language=objc
func (s_ SwipeTransitionObject) Extent() coregraphics.Rect {
	rv := objc.Call[coregraphics.Rect](s_, objc.Sel("extent"))
	return rv
}

func (s_ SwipeTransitionObject) HasSetAngle() bool {
	return s_.RespondsToSelector(objc.Sel("setAngle:"))
}

// The angle of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228775-angle?language=objc
func (s_ SwipeTransitionObject) SetAngle(value float32) {
	objc.Call[objc.Void](s_, objc.Sel("setAngle:"), value)
}

func (s_ SwipeTransitionObject) HasAngle() bool {
	return s_.RespondsToSelector(objc.Sel("angle"))
}

// The angle of the swipe. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/ciswipetransition/3228775-angle?language=objc
func (s_ SwipeTransitionObject) Angle() float32 {
	rv := objc.Call[float32](s_, objc.Sel("angle"))
	return rv
}
