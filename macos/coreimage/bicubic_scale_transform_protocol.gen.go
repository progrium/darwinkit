// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a bicubic scale transform filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform?language=objc
type PBicubicScaleTransform interface {
	// optional
	SetScale(value float32)
	HasSetScale() bool

	// optional
	Scale() float32
	HasScale() bool

	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetParameterC(value float32)
	HasSetParameterC() bool

	// optional
	ParameterC() float32
	HasParameterC() bool

	// optional
	SetAspectRatio(value float32)
	HasSetAspectRatio() bool

	// optional
	AspectRatio() float32
	HasAspectRatio() bool

	// optional
	SetParameterB(value float32)
	HasSetParameterB() bool

	// optional
	ParameterB() float32
	HasParameterB() bool
}

// ensure impl type implements protocol interface
var _ PBicubicScaleTransform = (*BicubicScaleTransformObject)(nil)

// A concrete type for the [PBicubicScaleTransform] protocol.
type BicubicScaleTransformObject struct {
	objc.Object
}

func (b_ BicubicScaleTransformObject) HasSetScale() bool {
	return b_.RespondsToSelector(objc.Sel("setScale:"))
}

// The scaling factor to use on the image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228078-scale?language=objc
func (b_ BicubicScaleTransformObject) SetScale(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setScale:"), value)
}

func (b_ BicubicScaleTransformObject) HasScale() bool {
	return b_.RespondsToSelector(objc.Sel("scale"))
}

// The scaling factor to use on the image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228078-scale?language=objc
func (b_ BicubicScaleTransformObject) Scale() float32 {
	rv := objc.Call[float32](b_, objc.Sel("scale"))
	return rv
}

func (b_ BicubicScaleTransformObject) HasSetInputImage() bool {
	return b_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228075-inputimage?language=objc
func (b_ BicubicScaleTransformObject) SetInputImage(value Image) {
	objc.Call[objc.Void](b_, objc.Sel("setInputImage:"), value)
}

func (b_ BicubicScaleTransformObject) HasInputImage() bool {
	return b_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228075-inputimage?language=objc
func (b_ BicubicScaleTransformObject) InputImage() Image {
	rv := objc.Call[Image](b_, objc.Sel("inputImage"))
	return rv
}

func (b_ BicubicScaleTransformObject) HasSetParameterC() bool {
	return b_.RespondsToSelector(objc.Sel("setParameterC:"))
}

// The value of C to use for the cubic resampling function. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228077-parameterc?language=objc
func (b_ BicubicScaleTransformObject) SetParameterC(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setParameterC:"), value)
}

func (b_ BicubicScaleTransformObject) HasParameterC() bool {
	return b_.RespondsToSelector(objc.Sel("parameterC"))
}

// The value of C to use for the cubic resampling function. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228077-parameterc?language=objc
func (b_ BicubicScaleTransformObject) ParameterC() float32 {
	rv := objc.Call[float32](b_, objc.Sel("parameterC"))
	return rv
}

func (b_ BicubicScaleTransformObject) HasSetAspectRatio() bool {
	return b_.RespondsToSelector(objc.Sel("setAspectRatio:"))
}

// The additional horizontal scaling factor to use on the image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228074-aspectratio?language=objc
func (b_ BicubicScaleTransformObject) SetAspectRatio(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setAspectRatio:"), value)
}

func (b_ BicubicScaleTransformObject) HasAspectRatio() bool {
	return b_.RespondsToSelector(objc.Sel("aspectRatio"))
}

// The additional horizontal scaling factor to use on the image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228074-aspectratio?language=objc
func (b_ BicubicScaleTransformObject) AspectRatio() float32 {
	rv := objc.Call[float32](b_, objc.Sel("aspectRatio"))
	return rv
}

func (b_ BicubicScaleTransformObject) HasSetParameterB() bool {
	return b_.RespondsToSelector(objc.Sel("setParameterB:"))
}

// The value of B to use for the cubic resampling function. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228076-parameterb?language=objc
func (b_ BicubicScaleTransformObject) SetParameterB(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setParameterB:"), value)
}

func (b_ BicubicScaleTransformObject) HasParameterB() bool {
	return b_.RespondsToSelector(objc.Sel("parameterB"))
}

// The value of B to use for the cubic resampling function. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibicubicscaletransform/3228076-parameterb?language=objc
func (b_ BicubicScaleTransformObject) ParameterB() float32 {
	rv := objc.Call[float32](b_, objc.Sel("parameterB"))
	return rv
}
