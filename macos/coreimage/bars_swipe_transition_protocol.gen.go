// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a bars swipe transition filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition?language=objc
type PBarsSwipeTransition interface {
	// optional
	SetWidth(value float32)
	HasSetWidth() bool

	// optional
	Width() float32
	HasWidth() bool

	// optional
	SetBarOffset(value float32)
	HasSetBarOffset() bool

	// optional
	BarOffset() float32
	HasBarOffset() bool

	// optional
	SetAngle(value float32)
	HasSetAngle() bool

	// optional
	Angle() float32
	HasAngle() bool
}

// ensure impl type implements protocol interface
var _ PBarsSwipeTransition = (*BarsSwipeTransitionObject)(nil)

// A concrete type for the [PBarsSwipeTransition] protocol.
type BarsSwipeTransitionObject struct {
	objc.Object
}

func (b_ BarsSwipeTransitionObject) HasSetWidth() bool {
	return b_.RespondsToSelector(objc.Sel("setWidth:"))
}

// The width of each bar. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228072-width?language=objc
func (b_ BarsSwipeTransitionObject) SetWidth(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setWidth:"), value)
}

func (b_ BarsSwipeTransitionObject) HasWidth() bool {
	return b_.RespondsToSelector(objc.Sel("width"))
}

// The width of each bar. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228072-width?language=objc
func (b_ BarsSwipeTransitionObject) Width() float32 {
	rv := objc.Call[float32](b_, objc.Sel("width"))
	return rv
}

func (b_ BarsSwipeTransitionObject) HasSetBarOffset() bool {
	return b_.RespondsToSelector(objc.Sel("setBarOffset:"))
}

// The offset of one bar with respect to another. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228071-baroffset?language=objc
func (b_ BarsSwipeTransitionObject) SetBarOffset(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setBarOffset:"), value)
}

func (b_ BarsSwipeTransitionObject) HasBarOffset() bool {
	return b_.RespondsToSelector(objc.Sel("barOffset"))
}

// The offset of one bar with respect to another. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228071-baroffset?language=objc
func (b_ BarsSwipeTransitionObject) BarOffset() float32 {
	rv := objc.Call[float32](b_, objc.Sel("barOffset"))
	return rv
}

func (b_ BarsSwipeTransitionObject) HasSetAngle() bool {
	return b_.RespondsToSelector(objc.Sel("setAngle:"))
}

// The angle, in radians, of the bars. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228070-angle?language=objc
func (b_ BarsSwipeTransitionObject) SetAngle(value float32) {
	objc.Call[objc.Void](b_, objc.Sel("setAngle:"), value)
}

func (b_ BarsSwipeTransitionObject) HasAngle() bool {
	return b_.RespondsToSelector(objc.Sel("angle"))
}

// The angle, in radians, of the bars. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/cibarsswipetransition/3228070-angle?language=objc
func (b_ BarsSwipeTransitionObject) Angle() float32 {
	rv := objc.Call[float32](b_, objc.Sel("angle"))
	return rv
}
