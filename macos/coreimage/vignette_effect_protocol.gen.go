// Code generated by DarwinKit. DO NOT EDIT.

package coreimage

import (
	"github.com/progrium/darwinkit/macos/coregraphics"
	"github.com/progrium/darwinkit/objc"
)

// The properties you use to configure a vignette-effect filter. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect?language=objc
type PVignetteEffect interface {
	// optional
	SetInputImage(value Image)
	HasSetInputImage() bool

	// optional
	InputImage() Image
	HasInputImage() bool

	// optional
	SetIntensity(value float32)
	HasSetIntensity() bool

	// optional
	Intensity() float32
	HasIntensity() bool

	// optional
	SetFalloff(value float32)
	HasSetFalloff() bool

	// optional
	Falloff() float32
	HasFalloff() bool

	// optional
	SetRadius(value float32)
	HasSetRadius() bool

	// optional
	Radius() float32
	HasRadius() bool

	// optional
	SetCenter(value coregraphics.Point)
	HasSetCenter() bool

	// optional
	Center() coregraphics.Point
	HasCenter() bool
}

// ensure impl type implements protocol interface
var _ PVignetteEffect = (*VignetteEffectObject)(nil)

// A concrete type for the [PVignetteEffect] protocol.
type VignetteEffectObject struct {
	objc.Object
}

func (v_ VignetteEffectObject) HasSetInputImage() bool {
	return v_.RespondsToSelector(objc.Sel("setInputImage:"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228832-inputimage?language=objc
func (v_ VignetteEffectObject) SetInputImage(value Image) {
	objc.Call[objc.Void](v_, objc.Sel("setInputImage:"), value)
}

func (v_ VignetteEffectObject) HasInputImage() bool {
	return v_.RespondsToSelector(objc.Sel("inputImage"))
}

// The image to use as an input image. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228832-inputimage?language=objc
func (v_ VignetteEffectObject) InputImage() Image {
	rv := objc.Call[Image](v_, objc.Sel("inputImage"))
	return rv
}

func (v_ VignetteEffectObject) HasSetIntensity() bool {
	return v_.RespondsToSelector(objc.Sel("setIntensity:"))
}

// The intensity of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228833-intensity?language=objc
func (v_ VignetteEffectObject) SetIntensity(value float32) {
	objc.Call[objc.Void](v_, objc.Sel("setIntensity:"), value)
}

func (v_ VignetteEffectObject) HasIntensity() bool {
	return v_.RespondsToSelector(objc.Sel("intensity"))
}

// The intensity of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228833-intensity?language=objc
func (v_ VignetteEffectObject) Intensity() float32 {
	rv := objc.Call[float32](v_, objc.Sel("intensity"))
	return rv
}

func (v_ VignetteEffectObject) HasSetFalloff() bool {
	return v_.RespondsToSelector(objc.Sel("setFalloff:"))
}

// The falloff of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228831-falloff?language=objc
func (v_ VignetteEffectObject) SetFalloff(value float32) {
	objc.Call[objc.Void](v_, objc.Sel("setFalloff:"), value)
}

func (v_ VignetteEffectObject) HasFalloff() bool {
	return v_.RespondsToSelector(objc.Sel("falloff"))
}

// The falloff of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228831-falloff?language=objc
func (v_ VignetteEffectObject) Falloff() float32 {
	rv := objc.Call[float32](v_, objc.Sel("falloff"))
	return rv
}

func (v_ VignetteEffectObject) HasSetRadius() bool {
	return v_.RespondsToSelector(objc.Sel("setRadius:"))
}

// The distance from the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228834-radius?language=objc
func (v_ VignetteEffectObject) SetRadius(value float32) {
	objc.Call[objc.Void](v_, objc.Sel("setRadius:"), value)
}

func (v_ VignetteEffectObject) HasRadius() bool {
	return v_.RespondsToSelector(objc.Sel("radius"))
}

// The distance from the center of the effect. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228834-radius?language=objc
func (v_ VignetteEffectObject) Radius() float32 {
	rv := objc.Call[float32](v_, objc.Sel("radius"))
	return rv
}

func (v_ VignetteEffectObject) HasSetCenter() bool {
	return v_.RespondsToSelector(objc.Sel("setCenter:"))
}

// The center of the effect as x and y coordinates. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228830-center?language=objc
func (v_ VignetteEffectObject) SetCenter(value coregraphics.Point) {
	objc.Call[objc.Void](v_, objc.Sel("setCenter:"), value)
}

func (v_ VignetteEffectObject) HasCenter() bool {
	return v_.RespondsToSelector(objc.Sel("center"))
}

// The center of the effect as x and y coordinates. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coreimage/civignetteeffect/3228830-center?language=objc
func (v_ VignetteEffectObject) Center() coregraphics.Point {
	rv := objc.Call[coregraphics.Point](v_, objc.Sel("center"))
	return rv
}
