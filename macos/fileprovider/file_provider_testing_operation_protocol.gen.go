// Code generated by DarwinKit. DO NOT EDIT.

package fileprovider

import (
	"github.com/progrium/darwinkit/objc"
)

// An operation that the system can schedule. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation?language=objc
type PFileProviderTestingOperation interface {
	// optional
	AsModification() FileProviderTestingModificationObject
	HasAsModification() bool

	// optional
	AsCreation() FileProviderTestingCreationObject
	HasAsCreation() bool

	// optional
	AsDeletion() FileProviderTestingDeletionObject
	HasAsDeletion() bool

	// optional
	AsLookup() FileProviderTestingLookupObject
	HasAsLookup() bool

	// optional
	AsContentFetch() FileProviderTestingContentFetchObject
	HasAsContentFetch() bool

	// optional
	AsIngestion() FileProviderTestingIngestionObject
	HasAsIngestion() bool

	// optional
	AsCollisionResolution() FileProviderTestingCollisionResolutionObject
	HasAsCollisionResolution() bool

	// optional
	AsChildrenEnumeration() FileProviderTestingChildrenEnumerationObject
	HasAsChildrenEnumeration() bool

	// optional
	Type() FileProviderTestingOperationType
	HasType() bool
}

// ensure impl type implements protocol interface
var _ PFileProviderTestingOperation = (*FileProviderTestingOperationObject)(nil)

// A concrete type for the [PFileProviderTestingOperation] protocol.
type FileProviderTestingOperationObject struct {
	objc.Object
}

func (f_ FileProviderTestingOperationObject) HasAsModification() bool {
	return f_.RespondsToSelector(objc.Sel("asModification"))
}

// Returns the operation if it propagates a change. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736254-asmodification?language=objc
func (f_ FileProviderTestingOperationObject) AsModification() FileProviderTestingModificationObject {
	rv := objc.Call[FileProviderTestingModificationObject](f_, objc.Sel("asModification"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsCreation() bool {
	return f_.RespondsToSelector(objc.Sel("asCreation"))
}

// Returns the operation if it propagates the creation of an item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736250-ascreation?language=objc
func (f_ FileProviderTestingOperationObject) AsCreation() FileProviderTestingCreationObject {
	rv := objc.Call[FileProviderTestingCreationObject](f_, objc.Sel("asCreation"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsDeletion() bool {
	return f_.RespondsToSelector(objc.Sel("asDeletion"))
}

// Returns the operation if it propagates the deletion of an item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736251-asdeletion?language=objc
func (f_ FileProviderTestingOperationObject) AsDeletion() FileProviderTestingDeletionObject {
	rv := objc.Call[FileProviderTestingDeletionObject](f_, objc.Sel("asDeletion"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsLookup() bool {
	return f_.RespondsToSelector(objc.Sel("asLookup"))
}

// Returns the operation if it looks up an item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736253-aslookup?language=objc
func (f_ FileProviderTestingOperationObject) AsLookup() FileProviderTestingLookupObject {
	rv := objc.Call[FileProviderTestingLookupObject](f_, objc.Sel("asLookup"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsContentFetch() bool {
	return f_.RespondsToSelector(objc.Sel("asContentFetch"))
}

// Returns the operation if it fetches an item’s content. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736249-ascontentfetch?language=objc
func (f_ FileProviderTestingOperationObject) AsContentFetch() FileProviderTestingContentFetchObject {
	rv := objc.Call[FileProviderTestingContentFetchObject](f_, objc.Sel("asContentFetch"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsIngestion() bool {
	return f_.RespondsToSelector(objc.Sel("asIngestion"))
}

// Returns the operation if it alerts the system to changes. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736252-asingestion?language=objc
func (f_ FileProviderTestingOperationObject) AsIngestion() FileProviderTestingIngestionObject {
	rv := objc.Call[FileProviderTestingIngestionObject](f_, objc.Sel("asIngestion"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsCollisionResolution() bool {
	return f_.RespondsToSelector(objc.Sel("asCollisionResolution"))
}

// Returns the operation if it resolves a collision by renaming the new item. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736248-ascollisionresolution?language=objc
func (f_ FileProviderTestingOperationObject) AsCollisionResolution() FileProviderTestingCollisionResolutionObject {
	rv := objc.Call[FileProviderTestingCollisionResolutionObject](f_, objc.Sel("asCollisionResolution"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasAsChildrenEnumeration() bool {
	return f_.RespondsToSelector(objc.Sel("asChildrenEnumeration"))
}

// Returns the operation if it enumerates contained items. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736247-aschildrenenumeration?language=objc
func (f_ FileProviderTestingOperationObject) AsChildrenEnumeration() FileProviderTestingChildrenEnumerationObject {
	rv := objc.Call[FileProviderTestingChildrenEnumerationObject](f_, objc.Sel("asChildrenEnumeration"))
	return rv
}

func (f_ FileProviderTestingOperationObject) HasType() bool {
	return f_.RespondsToSelector(objc.Sel("type"))
}

// The operation’s type. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/fileprovider/nsfileprovidertestingoperation/3736255-type?language=objc
func (f_ FileProviderTestingOperationObject) Type() FileProviderTestingOperationType {
	rv := objc.Call[FileProviderTestingOperationType](f_, objc.Sel("type"))
	return rv
}
