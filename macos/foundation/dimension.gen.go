// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"unsafe"

	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [Dimension] class.
var DimensionClass = _DimensionClass{objc.GetClass("NSDimension")}

type _DimensionClass struct {
	objc.Class
}

// An interface definition for the [Dimension] class.
type IDimension interface {
	IUnit
	Converter() UnitConverter
}

// An abstract class representing a dimensional unit of measure. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsdimension?language=objc
type Dimension struct {
	Unit
}

func DimensionFrom(ptr unsafe.Pointer) Dimension {
	return Dimension{
		Unit: UnitFrom(ptr),
	}
}

func (dc _DimensionClass) BaseUnit() Dimension {
	rv := objc.Call[Dimension](dc, objc.Sel("baseUnit"))
	return rv
}

// Returns the base unit. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsdimension/1690740-baseunit?language=objc
func Dimension_BaseUnit() Dimension {
	return DimensionClass.BaseUnit()
}

func (d_ Dimension) InitWithSymbolConverter(symbol string, converter IUnitConverter) Dimension {
	rv := objc.Call[Dimension](d_, objc.Sel("initWithSymbol:converter:"), symbol, converter)
	return rv
}

// Initializes a dimensional unit with the symbol and unit converter you specify. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsdimension/1823633-initwithsymbol?language=objc
func NewDimensionWithSymbolConverter(symbol string, converter IUnitConverter) Dimension {
	instance := DimensionClass.Alloc().InitWithSymbolConverter(symbol, converter)
	instance.Autorelease()
	return instance
}

func (dc _DimensionClass) Alloc() Dimension {
	rv := objc.Call[Dimension](dc, objc.Sel("alloc"))
	return rv
}

func (dc _DimensionClass) New() Dimension {
	rv := objc.Call[Dimension](dc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewDimension() Dimension {
	return DimensionClass.New()
}

func (d_ Dimension) Init() Dimension {
	rv := objc.Call[Dimension](d_, objc.Sel("init"))
	return rv
}

func (d_ Dimension) InitWithSymbol(symbol string) Dimension {
	rv := objc.Call[Dimension](d_, objc.Sel("initWithSymbol:"), symbol)
	return rv
}

// Initializes a new unit with the specified symbol. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsunit/1690760-initwithsymbol?language=objc
func NewDimensionWithSymbol(symbol string) Dimension {
	instance := DimensionClass.Alloc().InitWithSymbol(symbol)
	instance.Autorelease()
	return instance
}

// The unit converter that represents the unit in terms of the dimensionâ€™s base unit. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsdimension/1823516-converter?language=objc
func (d_ Dimension) Converter() UnitConverter {
	rv := objc.Call[UnitConverter](d_, objc.Sel("converter"))
	return rv
}
