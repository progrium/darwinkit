// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"github.com/progrium/darwinkit/objc"
)

// The URLAuthenticationChallengeSender protocol represents the interface that the sender of an authentication challenge must implement. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender?language=objc
type PURLAuthenticationChallengeSender interface {
	// optional
	CancelAuthenticationChallenge(challenge URLAuthenticationChallenge)
	HasCancelAuthenticationChallenge() bool

	// optional
	ContinueWithoutCredentialForAuthenticationChallenge(challenge URLAuthenticationChallenge)
	HasContinueWithoutCredentialForAuthenticationChallenge() bool

	// optional
	PerformDefaultHandlingForAuthenticationChallenge(challenge URLAuthenticationChallenge)
	HasPerformDefaultHandlingForAuthenticationChallenge() bool

	// optional
	RejectProtectionSpaceAndContinueWithChallenge(challenge URLAuthenticationChallenge)
	HasRejectProtectionSpaceAndContinueWithChallenge() bool

	// optional
	UseCredentialForAuthenticationChallenge(credential URLCredential, challenge URLAuthenticationChallenge)
	HasUseCredentialForAuthenticationChallenge() bool
}

// ensure impl type implements protocol interface
var _ PURLAuthenticationChallengeSender = (*URLAuthenticationChallengeSenderObject)(nil)

// A concrete type for the [PURLAuthenticationChallengeSender] protocol.
type URLAuthenticationChallengeSenderObject struct {
	objc.Object
}

func (u_ URLAuthenticationChallengeSenderObject) HasCancelAuthenticationChallenge() bool {
	return u_.RespondsToSelector(objc.Sel("cancelAuthenticationChallenge:"))
}

// Cancels a given authentication challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender/1414474-cancelauthenticationchallenge?language=objc
func (u_ URLAuthenticationChallengeSenderObject) CancelAuthenticationChallenge(challenge URLAuthenticationChallenge) {
	objc.Call[objc.Void](u_, objc.Sel("cancelAuthenticationChallenge:"), challenge)
}

func (u_ URLAuthenticationChallengeSenderObject) HasContinueWithoutCredentialForAuthenticationChallenge() bool {
	return u_.RespondsToSelector(objc.Sel("continueWithoutCredentialForAuthenticationChallenge:"))
}

// Attempt to continue downloading a request without providing a credential for a given challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender/1413016-continuewithoutcredentialforauth?language=objc
func (u_ URLAuthenticationChallengeSenderObject) ContinueWithoutCredentialForAuthenticationChallenge(challenge URLAuthenticationChallenge) {
	objc.Call[objc.Void](u_, objc.Sel("continueWithoutCredentialForAuthenticationChallenge:"), challenge)
}

func (u_ URLAuthenticationChallengeSenderObject) HasPerformDefaultHandlingForAuthenticationChallenge() bool {
	return u_.RespondsToSelector(objc.Sel("performDefaultHandlingForAuthenticationChallenge:"))
}

// Causes the system-provided default behavior to be used. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender/1414590-performdefaulthandlingforauthent?language=objc
func (u_ URLAuthenticationChallengeSenderObject) PerformDefaultHandlingForAuthenticationChallenge(challenge URLAuthenticationChallenge) {
	objc.Call[objc.Void](u_, objc.Sel("performDefaultHandlingForAuthenticationChallenge:"), challenge)
}

func (u_ URLAuthenticationChallengeSenderObject) HasRejectProtectionSpaceAndContinueWithChallenge() bool {
	return u_.RespondsToSelector(objc.Sel("rejectProtectionSpaceAndContinueWithChallenge:"))
}

// Rejects the currently supplied protection space. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender/1417331-rejectprotectionspaceandcontinue?language=objc
func (u_ URLAuthenticationChallengeSenderObject) RejectProtectionSpaceAndContinueWithChallenge(challenge URLAuthenticationChallenge) {
	objc.Call[objc.Void](u_, objc.Sel("rejectProtectionSpaceAndContinueWithChallenge:"), challenge)
}

func (u_ URLAuthenticationChallengeSenderObject) HasUseCredentialForAuthenticationChallenge() bool {
	return u_.RespondsToSelector(objc.Sel("useCredential:forAuthenticationChallenge:"))
}

// Attempt to use a given credential for a given authentication challenge. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlauthenticationchallengesender/1411062-usecredential?language=objc
func (u_ URLAuthenticationChallengeSenderObject) UseCredentialForAuthenticationChallenge(credential URLCredential, challenge URLAuthenticationChallenge) {
	objc.Call[objc.Void](u_, objc.Sel("useCredential:forAuthenticationChallenge:"), credential, challenge)
}
