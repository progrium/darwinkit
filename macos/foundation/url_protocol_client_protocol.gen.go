// Code generated by DarwinKit. DO NOT EDIT.

package foundation

import (
	"github.com/progrium/darwinkit/objc"
)

// The interface used by NSURLProtocol subclasses to communicate with the URL Loading System. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlprotocolclient?language=objc
type PURLProtocolClient interface {
	// optional
	URLProtocolDidFailWithError(protocol URLProtocol, error Error)
	HasURLProtocolDidFailWithError() bool

	// optional
	URLProtocolDidFinishLoading(protocol URLProtocol)
	HasURLProtocolDidFinishLoading() bool
}

// ensure impl type implements protocol interface
var _ PURLProtocolClient = (*URLProtocolClientObject)(nil)

// A concrete type for the [PURLProtocolClient] protocol.
type URLProtocolClientObject struct {
	objc.Object
}

func (u_ URLProtocolClientObject) HasURLProtocolDidFailWithError() bool {
	return u_.RespondsToSelector(objc.Sel("URLProtocol:didFailWithError:"))
}

// Tells the client that the load request failed due to an error. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlprotocolclient/1413131-urlprotocol?language=objc
func (u_ URLProtocolClientObject) URLProtocolDidFailWithError(protocol URLProtocol, error Error) {
	objc.Call[objc.Void](u_, objc.Sel("URLProtocol:didFailWithError:"), protocol, error)
}

func (u_ URLProtocolClientObject) HasURLProtocolDidFinishLoading() bool {
	return u_.RespondsToSelector(objc.Sel("URLProtocolDidFinishLoading:"))
}

// Tells the client that the protocol implementation has finished loading. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/foundation/nsurlprotocolclient/1411543-urlprotocoldidfinishloading?language=objc
func (u_ URLProtocolClientObject) URLProtocolDidFinishLoading(protocol URLProtocol) {
	objc.Call[objc.Void](u_, objc.Sel("URLProtocolDidFinishLoading:"), protocol)
}
