// Code generated by DarwinKit. DO NOT EDIT.

package coremediaio

import (
	"unsafe"

	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A protocol for objects that act as provider sources. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource?language=objc
type PExtensionProviderSource interface {
	// optional
	SetProviderPropertiesError(providerProperties ExtensionProviderProperties, outError unsafe.Pointer) bool
	HasSetProviderPropertiesError() bool

	// optional
	ProviderPropertiesForPropertiesError(properties foundation.Set, outError unsafe.Pointer) ExtensionProviderProperties
	HasProviderPropertiesForPropertiesError() bool

	// optional
	ConnectClientError(client ExtensionClient, outError unsafe.Pointer) bool
	HasConnectClientError() bool

	// optional
	DisconnectClient(client ExtensionClient)
	HasDisconnectClient() bool

	// optional
	AvailableProperties() foundation.Set
	HasAvailableProperties() bool
}

// ensure impl type implements protocol interface
var _ PExtensionProviderSource = (*ExtensionProviderSourceObject)(nil)

// A concrete type for the [PExtensionProviderSource] protocol.
type ExtensionProviderSourceObject struct {
	objc.Object
}

func (e_ ExtensionProviderSourceObject) HasSetProviderPropertiesError() bool {
	return e_.RespondsToSelector(objc.Sel("setProviderProperties:error:"))
}

// Set the state of provider properties. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource/3915928-setproviderproperties?language=objc
func (e_ ExtensionProviderSourceObject) SetProviderPropertiesError(providerProperties ExtensionProviderProperties, outError unsafe.Pointer) bool {
	rv := objc.Call[bool](e_, objc.Sel("setProviderProperties:error:"), providerProperties, outError)
	return rv
}

func (e_ ExtensionProviderSourceObject) HasProviderPropertiesForPropertiesError() bool {
	return e_.RespondsToSelector(objc.Sel("providerPropertiesForProperties:error:"))
}

// Gets the state of provider properties. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource/3915927-providerpropertiesforproperties?language=objc
func (e_ ExtensionProviderSourceObject) ProviderPropertiesForPropertiesError(properties foundation.Set, outError unsafe.Pointer) ExtensionProviderProperties {
	rv := objc.Call[ExtensionProviderProperties](e_, objc.Sel("providerPropertiesForProperties:error:"), properties, outError)
	return rv
}

func (e_ ExtensionProviderSourceObject) HasConnectClientError() bool {
	return e_.RespondsToSelector(objc.Sel("connectClient:error:"))
}

// Connects a client to a source’s provider. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource/3915925-connectclient?language=objc
func (e_ ExtensionProviderSourceObject) ConnectClientError(client ExtensionClient, outError unsafe.Pointer) bool {
	rv := objc.Call[bool](e_, objc.Sel("connectClient:error:"), client, outError)
	return rv
}

func (e_ ExtensionProviderSourceObject) HasDisconnectClient() bool {
	return e_.RespondsToSelector(objc.Sel("disconnectClient:"))
}

// Disconnects a client from a source’s provider. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource/3915926-disconnectclient?language=objc
func (e_ ExtensionProviderSourceObject) DisconnectClient(client ExtensionClient) {
	objc.Call[objc.Void](e_, objc.Sel("disconnectClient:"), client)
}

func (e_ ExtensionProviderSourceObject) HasAvailableProperties() bool {
	return e_.RespondsToSelector(objc.Sel("availableProperties"))
}

// A set of available properties for a provider. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/coremediaio/cmioextensionprovidersource/3915924-availableproperties?language=objc
func (e_ ExtensionProviderSourceObject) AvailableProperties() foundation.Set {
	rv := objc.Call[foundation.Set](e_, objc.Sel("availableProperties"))
	return rv
}
