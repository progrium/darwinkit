// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/objc"
)

// A role-based protocol that declares the minimum interface necessary for an accessibility element to act as a layout area. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilitylayoutarea?language=objc
type PAccessibilityLayoutArea interface {
	// optional
	AccessibilityChildren() []objc.Object
	HasAccessibilityChildren() bool

	// optional
	AccessibilityLabel() string
	HasAccessibilityLabel() bool

	// optional
	AccessibilitySelectedChildren() []objc.Object
	HasAccessibilitySelectedChildren() bool

	// optional
	AccessibilityFocusedUIElement() objc.Object
	HasAccessibilityFocusedUIElement() bool
}

// ensure impl type implements protocol interface
var _ PAccessibilityLayoutArea = (*AccessibilityLayoutAreaObject)(nil)

// A concrete type for the [PAccessibilityLayoutArea] protocol.
type AccessibilityLayoutAreaObject struct {
	objc.Object
}

func (a_ AccessibilityLayoutAreaObject) HasAccessibilityChildren() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityChildren"))
}

// Returns the accessibility element’s children in the accessibility hierarchy. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilitylayoutarea/1534997-accessibilitychildren?language=objc
func (a_ AccessibilityLayoutAreaObject) AccessibilityChildren() []objc.Object {
	rv := objc.Call[[]objc.Object](a_, objc.Sel("accessibilityChildren"))
	return rv
}

func (a_ AccessibilityLayoutAreaObject) HasAccessibilityLabel() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityLabel"))
}

// Returns a short description of the layout area. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilitylayoutarea/1527051-accessibilitylabel?language=objc
func (a_ AccessibilityLayoutAreaObject) AccessibilityLabel() string {
	rv := objc.Call[string](a_, objc.Sel("accessibilityLabel"))
	return rv
}

func (a_ AccessibilityLayoutAreaObject) HasAccessibilitySelectedChildren() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilitySelectedChildren"))
}

// Returns the layout area’s currently selected children. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilitylayoutarea/1528883-accessibilityselectedchildren?language=objc
func (a_ AccessibilityLayoutAreaObject) AccessibilitySelectedChildren() []objc.Object {
	rv := objc.Call[[]objc.Object](a_, objc.Sel("accessibilitySelectedChildren"))
	return rv
}

func (a_ AccessibilityLayoutAreaObject) HasAccessibilityFocusedUIElement() bool {
	return a_.RespondsToSelector(objc.Sel("accessibilityFocusedUIElement"))
}

// The child accessibility element with the current focus. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nsaccessibilitylayoutarea/1533902-accessibilityfocuseduielement?language=objc
func (a_ AccessibilityLayoutAreaObject) AccessibilityFocusedUIElement() objc.Object {
	rv := objc.Call[objc.Object](a_, objc.Sel("accessibilityFocusedUIElement"))
	return rv
}
