// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/macos/foundation"
	"github.com/progrium/darwinkit/objc"
)

// A set of optional methods that delegates of layout manager objects implement. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate?language=objc
type PLayoutManagerDelegate interface {
	// optional
	LayoutManagerDidInvalidateLayout(sender LayoutManager)
	HasLayoutManagerDidInvalidateLayout() bool

	// optional
	LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object
	HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool
}

// A delegate implementation builder for the [PLayoutManagerDelegate] protocol.
type LayoutManagerDelegate struct {
	_LayoutManagerDidInvalidateLayout                                                          func(sender LayoutManager)
	_LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange func(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object
}

func (di *LayoutManagerDelegate) HasLayoutManagerDidInvalidateLayout() bool {
	return di._LayoutManagerDidInvalidateLayout != nil
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerDidInvalidateLayout(f func(sender LayoutManager)) {
	di._LayoutManagerDidInvalidateLayout = f
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (di *LayoutManagerDelegate) LayoutManagerDidInvalidateLayout(sender LayoutManager) {
	di._LayoutManagerDidInvalidateLayout(sender)
}
func (di *LayoutManagerDelegate) HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool {
	return di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange != nil
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (di *LayoutManagerDelegate) SetLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(f func(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object) {
	di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange = f
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (di *LayoutManagerDelegate) LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object {
	return di._LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager, attrs, toScreen, charIndex, effectiveCharRange)
}

// ensure impl type implements protocol interface
var _ PLayoutManagerDelegate = (*LayoutManagerDelegateObject)(nil)

// A concrete type for the [PLayoutManagerDelegate] protocol.
type LayoutManagerDelegateObject struct {
	objc.Object
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerDidInvalidateLayout() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManagerDidInvalidateLayout:"))
}

// Informs the delegate when the specified layout manager invalidates layout information (not glyph information). [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/uikit/nslayoutmanagerdelegate/1402993-layoutmanagerdidinvalidatelayout?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerDidInvalidateLayout(sender LayoutManager) {
	objc.Call[objc.Void](l_, objc.Sel("layoutManagerDidInvalidateLayout:"), sender)
}

func (l_ LayoutManagerDelegateObject) HasLayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange() bool {
	return l_.RespondsToSelector(objc.Sel("layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:"))
}

// Asks the delegate whether to use temporary attributes when drawing the text. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nslayoutmanagerdelegate/1403085-layoutmanager?language=objc
func (l_ LayoutManagerDelegateObject) LayoutManagerShouldUseTemporaryAttributesForDrawingToScreenAtCharacterIndexEffectiveRange(layoutManager LayoutManager, attrs map[foundation.AttributedStringKey]objc.Object, toScreen bool, charIndex uint, effectiveCharRange foundation.RangePointer) map[foundation.AttributedStringKey]objc.Object {
	rv := objc.Call[map[foundation.AttributedStringKey]objc.Object](l_, objc.Sel("layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:"), layoutManager, attrs, toScreen, charIndex, effectiveCharRange)
	return rv
}
