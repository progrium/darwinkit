// Code generated by DarwinKit. DO NOT EDIT.

package appkit

import (
	"github.com/progrium/darwinkit/objc"
)

//	[Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscomboboxcelldatasource?language=objc
type PComboBoxCellDataSource interface {
	// optional
	NumberOfItemsInComboBoxCell(comboBoxCell ComboBoxCell) int
	HasNumberOfItemsInComboBoxCell() bool

	// optional
	ComboBoxCellObjectValueForItemAtIndex(comboBoxCell ComboBoxCell, index int) objc.Object
	HasComboBoxCellObjectValueForItemAtIndex() bool
}

// ensure impl type implements protocol interface
var _ PComboBoxCellDataSource = (*ComboBoxCellDataSourceObject)(nil)

// A concrete type for the [PComboBoxCellDataSource] protocol.
type ComboBoxCellDataSourceObject struct {
	objc.Object
}

func (c_ ComboBoxCellDataSourceObject) HasNumberOfItemsInComboBoxCell() bool {
	return c_.RespondsToSelector(objc.Sel("numberOfItemsInComboBoxCell:"))
}

// Returns the number of items managed for the combo box cell by your data source object. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscomboboxcelldatasource/1410302-numberofitemsincomboboxcell?language=objc
func (c_ ComboBoxCellDataSourceObject) NumberOfItemsInComboBoxCell(comboBoxCell ComboBoxCell) int {
	rv := objc.Call[int](c_, objc.Sel("numberOfItemsInComboBoxCell:"), comboBoxCell)
	return rv
}

func (c_ ComboBoxCellDataSourceObject) HasComboBoxCellObjectValueForItemAtIndex() bool {
	return c_.RespondsToSelector(objc.Sel("comboBoxCell:objectValueForItemAtIndex:"))
}

// Returns the object that corresponds to the item at the given index in the combo box cell. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/appkit/nscomboboxcelldatasource/1410258-comboboxcell?language=objc
func (c_ ComboBoxCellDataSourceObject) ComboBoxCellObjectValueForItemAtIndex(comboBoxCell ComboBoxCell, index int) objc.Object {
	rv := objc.Call[objc.Object](c_, objc.Sel("comboBoxCell:objectValueForItemAtIndex:"), comboBoxCell, index)
	return rv
}
