// Code generated by DarwinKit. DO NOT EDIT.

package avfoundation

import (
	"github.com/progrium/darwinkit/macos/coremedia"
	"github.com/progrium/darwinkit/objc"
)

// Methods you can implement to indicate whether validation of a video composition should continue after specific errors are found. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avvideocompositionvalidationhandling?language=objc
type PVideoCompositionValidationHandling interface {
	// optional
	VideoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange(videoComposition VideoComposition, timeRange coremedia.TimeRange) bool
	HasVideoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange() bool
}

// ensure impl type implements protocol interface
var _ PVideoCompositionValidationHandling = (*VideoCompositionValidationHandlingObject)(nil)

// A concrete type for the [PVideoCompositionValidationHandling] protocol.
type VideoCompositionValidationHandlingObject struct {
	objc.Object
}

func (v_ VideoCompositionValidationHandlingObject) HasVideoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange() bool {
	return v_.RespondsToSelector(objc.Sel("videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:"))
}

// Reports a time range that has no corresponding video composition instruction. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/avfoundation/avvideocompositionvalidationhandling/1388620-videocomposition?language=objc
func (v_ VideoCompositionValidationHandlingObject) VideoCompositionShouldContinueValidatingAfterFindingEmptyTimeRange(videoComposition VideoComposition, timeRange coremedia.TimeRange) bool {
	rv := objc.Call[bool](v_, objc.Sel("videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:"), videoComposition, timeRange)
	return rv
}
