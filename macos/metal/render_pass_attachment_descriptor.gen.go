// Code generated by DarwinKit. DO NOT EDIT.

package metal

import (
	"unsafe"

	"github.com/progrium/darwinkit/objc"
)

// The class instance for the [RenderPassAttachmentDescriptor] class.
var RenderPassAttachmentDescriptorClass = _RenderPassAttachmentDescriptorClass{objc.GetClass("MTLRenderPassAttachmentDescriptor")}

type _RenderPassAttachmentDescriptorClass struct {
	objc.Class
}

// An interface definition for the [RenderPassAttachmentDescriptor] class.
type IRenderPassAttachmentDescriptor interface {
	objc.IObject
	ResolveDepthPlane() uint
	SetResolveDepthPlane(value uint)
	ResolveLevel() uint
	SetResolveLevel(value uint)
	Level() uint
	SetLevel(value uint)
	StoreAction() StoreAction
	SetStoreAction(value StoreAction)
	LoadAction() LoadAction
	SetLoadAction(value LoadAction)
	Slice() uint
	SetSlice(value uint)
	ResolveSlice() uint
	SetResolveSlice(value uint)
	ResolveTexture() TextureObject
	SetResolveTexture(value PTexture)
	SetResolveTextureObject(valueObject objc.IObject)
	StoreActionOptions() StoreActionOptions
	SetStoreActionOptions(value StoreActionOptions)
	DepthPlane() uint
	SetDepthPlane(value uint)
	Texture() TextureObject
	SetTexture(value PTexture)
	SetTextureObject(valueObject objc.IObject)
}

// A render target that serves as the output destination for pixels generated by a render pass. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor?language=objc
type RenderPassAttachmentDescriptor struct {
	objc.Object
}

func RenderPassAttachmentDescriptorFrom(ptr unsafe.Pointer) RenderPassAttachmentDescriptor {
	return RenderPassAttachmentDescriptor{
		Object: objc.ObjectFrom(ptr),
	}
}

func (rc _RenderPassAttachmentDescriptorClass) Alloc() RenderPassAttachmentDescriptor {
	rv := objc.Call[RenderPassAttachmentDescriptor](rc, objc.Sel("alloc"))
	return rv
}

func (rc _RenderPassAttachmentDescriptorClass) New() RenderPassAttachmentDescriptor {
	rv := objc.Call[RenderPassAttachmentDescriptor](rc, objc.Sel("new"))
	rv.Autorelease()
	return rv
}

func NewRenderPassAttachmentDescriptor() RenderPassAttachmentDescriptor {
	return RenderPassAttachmentDescriptorClass.New()
}

func (r_ RenderPassAttachmentDescriptor) Init() RenderPassAttachmentDescriptor {
	rv := objc.Call[RenderPassAttachmentDescriptor](r_, objc.Sel("init"))
	return rv
}

// The depth plane of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437960-resolvedepthplane?language=objc
func (r_ RenderPassAttachmentDescriptor) ResolveDepthPlane() uint {
	rv := objc.Call[uint](r_, objc.Sel("resolveDepthPlane"))
	return rv
}

// The depth plane of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437960-resolvedepthplane?language=objc
func (r_ RenderPassAttachmentDescriptor) SetResolveDepthPlane(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setResolveDepthPlane:"), value)
}

// The mipmap level of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437918-resolvelevel?language=objc
func (r_ RenderPassAttachmentDescriptor) ResolveLevel() uint {
	rv := objc.Call[uint](r_, objc.Sel("resolveLevel"))
	return rv
}

// The mipmap level of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437918-resolvelevel?language=objc
func (r_ RenderPassAttachmentDescriptor) SetResolveLevel(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setResolveLevel:"), value)
}

// The mipmap level of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437984-level?language=objc
func (r_ RenderPassAttachmentDescriptor) Level() uint {
	rv := objc.Call[uint](r_, objc.Sel("level"))
	return rv
}

// The mipmap level of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437984-level?language=objc
func (r_ RenderPassAttachmentDescriptor) SetLevel(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setLevel:"), value)
}

// The action performed by this attachment at the end of a rendering pass for a render command encoder. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437956-storeaction?language=objc
func (r_ RenderPassAttachmentDescriptor) StoreAction() StoreAction {
	rv := objc.Call[StoreAction](r_, objc.Sel("storeAction"))
	return rv
}

// The action performed by this attachment at the end of a rendering pass for a render command encoder. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437956-storeaction?language=objc
func (r_ RenderPassAttachmentDescriptor) SetStoreAction(value StoreAction) {
	objc.Call[objc.Void](r_, objc.Sel("setStoreAction:"), value)
}

// The action performed by this attachment at the start of a rendering pass for a render command encoder. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437905-loadaction?language=objc
func (r_ RenderPassAttachmentDescriptor) LoadAction() LoadAction {
	rv := objc.Call[LoadAction](r_, objc.Sel("loadAction"))
	return rv
}

// The action performed by this attachment at the start of a rendering pass for a render command encoder. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437905-loadaction?language=objc
func (r_ RenderPassAttachmentDescriptor) SetLoadAction(value LoadAction) {
	objc.Call[objc.Void](r_, objc.Sel("setLoadAction:"), value)
}

// The slice of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437914-slice?language=objc
func (r_ RenderPassAttachmentDescriptor) Slice() uint {
	rv := objc.Call[uint](r_, objc.Sel("slice"))
	return rv
}

// The slice of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437914-slice?language=objc
func (r_ RenderPassAttachmentDescriptor) SetSlice(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setSlice:"), value)
}

// The slice of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437966-resolveslice?language=objc
func (r_ RenderPassAttachmentDescriptor) ResolveSlice() uint {
	rv := objc.Call[uint](r_, objc.Sel("resolveSlice"))
	return rv
}

// The slice of the texture used for the multisample resolve action. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437966-resolveslice?language=objc
func (r_ RenderPassAttachmentDescriptor) SetResolveSlice(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setResolveSlice:"), value)
}

// The destination texture used when resolving multisampled texture data into single sample values. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437926-resolvetexture?language=objc
func (r_ RenderPassAttachmentDescriptor) ResolveTexture() TextureObject {
	rv := objc.Call[TextureObject](r_, objc.Sel("resolveTexture"))
	return rv
}

// The destination texture used when resolving multisampled texture data into single sample values. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437926-resolvetexture?language=objc
func (r_ RenderPassAttachmentDescriptor) SetResolveTexture(value PTexture) {
	po0 := objc.WrapAsProtocol("MTLTexture", value)
	objc.Call[objc.Void](r_, objc.Sel("setResolveTexture:"), po0)
}

// The destination texture used when resolving multisampled texture data into single sample values. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437926-resolvetexture?language=objc
func (r_ RenderPassAttachmentDescriptor) SetResolveTextureObject(valueObject objc.IObject) {
	objc.Call[objc.Void](r_, objc.Sel("setResolveTexture:"), valueObject)
}

// The options that modify the store action performed by this attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/2919782-storeactionoptions?language=objc
func (r_ RenderPassAttachmentDescriptor) StoreActionOptions() StoreActionOptions {
	rv := objc.Call[StoreActionOptions](r_, objc.Sel("storeActionOptions"))
	return rv
}

// The options that modify the store action performed by this attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/2919782-storeactionoptions?language=objc
func (r_ RenderPassAttachmentDescriptor) SetStoreActionOptions(value StoreActionOptions) {
	objc.Call[objc.Void](r_, objc.Sel("setStoreActionOptions:"), value)
}

// The depth plane of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437952-depthplane?language=objc
func (r_ RenderPassAttachmentDescriptor) DepthPlane() uint {
	rv := objc.Call[uint](r_, objc.Sel("depthPlane"))
	return rv
}

// The depth plane of the texture used for rendering to the attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437952-depthplane?language=objc
func (r_ RenderPassAttachmentDescriptor) SetDepthPlane(value uint) {
	objc.Call[objc.Void](r_, objc.Sel("setDepthPlane:"), value)
}

// The texture object associated with this attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437958-texture?language=objc
func (r_ RenderPassAttachmentDescriptor) Texture() TextureObject {
	rv := objc.Call[TextureObject](r_, objc.Sel("texture"))
	return rv
}

// The texture object associated with this attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437958-texture?language=objc
func (r_ RenderPassAttachmentDescriptor) SetTexture(value PTexture) {
	po0 := objc.WrapAsProtocol("MTLTexture", value)
	objc.Call[objc.Void](r_, objc.Sel("setTexture:"), po0)
}

// The texture object associated with this attachment. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlrenderpassattachmentdescriptor/1437958-texture?language=objc
func (r_ RenderPassAttachmentDescriptor) SetTextureObject(valueObject objc.IObject) {
	objc.Call[objc.Void](r_, objc.Sel("setTexture:"), valueObject)
}
