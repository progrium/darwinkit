// Code generated by DarwinKit. DO NOT EDIT.

package metal

import (
	"github.com/progrium/darwinkit/objc"
)

// A log entry a Metal device generates when the it runs a command buffer. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlfunctionlog?language=objc
type PFunctionLog interface {
	// optional
	Function() FunctionObject
	HasFunction() bool

	// optional
	DebugLocation() FunctionLogDebugLocationObject
	HasDebugLocation() bool

	// optional
	EncoderLabel() string
	HasEncoderLabel() bool

	// optional
	Type() FunctionLogType
	HasType() bool
}

// ensure impl type implements protocol interface
var _ PFunctionLog = (*FunctionLogObject)(nil)

// A concrete type for the [PFunctionLog] protocol.
type FunctionLogObject struct {
	objc.Object
}

func (f_ FunctionLogObject) HasFunction() bool {
	return f_.RespondsToSelector(objc.Sel("function"))
}

// When known, the function object corresponding to the logged message. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlfunctionlog/3554010-function?language=objc
func (f_ FunctionLogObject) Function() FunctionObject {
	rv := objc.Call[FunctionObject](f_, objc.Sel("function"))
	return rv
}

func (f_ FunctionLogObject) HasDebugLocation() bool {
	return f_.RespondsToSelector(objc.Sel("debugLocation"))
}

// If known, the location of the logging command within a shader source file. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlfunctionlog/3554007-debuglocation?language=objc
func (f_ FunctionLogObject) DebugLocation() FunctionLogDebugLocationObject {
	rv := objc.Call[FunctionLogDebugLocationObject](f_, objc.Sel("debugLocation"))
	return rv
}

func (f_ FunctionLogObject) HasEncoderLabel() bool {
	return f_.RespondsToSelector(objc.Sel("encoderLabel"))
}

// The label for the encoder that logged the message. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlfunctionlog/3577673-encoderlabel?language=objc
func (f_ FunctionLogObject) EncoderLabel() string {
	rv := objc.Call[string](f_, objc.Sel("encoderLabel"))
	return rv
}

func (f_ FunctionLogObject) HasType() bool {
	return f_.RespondsToSelector(objc.Sel("type"))
}

// The type of message that was logged. [Full Topic]
//
// [Full Topic]: https://developer.apple.com/documentation/metal/mtlfunctionlog/3554016-type?language=objc
func (f_ FunctionLogObject) Type() FunctionLogType {
	rv := objc.Call[FunctionLogType](f_, objc.Sel("type"))
	return rv
}
